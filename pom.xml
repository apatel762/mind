<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.aspatel</groupId>
  <artifactId>mind</artifactId>
  <version>${revision}</version>
  <name>Mind</name>
  <description>An idea for an infinite game to pass the time with</description>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!-- A CI-friendly version number property which is overridden at build time by the CI/CD scripts.
    https://maven.apache.org/guides/mini/guide-maven-ci-friendly.html -->
    <revision>1.0.0-SNAPSHOT</revision>
    <!-- Java -->
    <java.version>21</java.version>
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.target>${java.version}</maven.compiler.target>
    <!-- Explicitly enable annotation processors so that there are no issues post JDK 23 -->
    <maven.compiler.proc>full</maven.compiler.proc>
    <!-- Dependencies -->
    <avaje-nima.version>1.4</avaje-nima.version>
    <mockito-core.version>5.17.0</mockito-core.version>
    <!--<archunit.version>1.4.1</archunit.version>-->
  </properties>
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>5.13.0</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>jakarta.validation</groupId>
      <artifactId>jakarta.validation-api</artifactId>
      <version>3.1.1</version>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.30</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>io.avaje</groupId>
      <artifactId>avaje-nima</artifactId>
      <version>${avaje-nima.version}</version>
    </dependency>
    <dependency>
      <groupId>io.avaje</groupId>
      <artifactId>avaje-nima-generator</artifactId>
      <version>${avaje-nima.version}</version>
      <scope>provided</scope>
      <optional>true</optional>
    </dependency>
    <!-- Test-related dependencies -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>${mockito-core.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <version>${mockito-core.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.avaje</groupId>
      <artifactId>avaje-nima-test</artifactId>
      <version>${avaje-nima.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <!-- LIFECYCLE REFERENCE:
       https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference -->
      <!-- pre-clean
      "execute processes needed prior to the actual project cleaning" -->
      <!-- clean
      "remove all files generated by the previous build" -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>flatten-maven-plugin</artifactId>
        <version>1.7.0</version>
        <configuration>
          <updatePomFile>true</updatePomFile>
          <flattenMode>resolveCiFriendliesOnly</flattenMode>
        </configuration>
        <executions>
          <execution>
            <id>clean-flattened-files</id>
            <goals>
              <goal>clean</goal>
            </goals>
            <phase>clean</phase>
          </execution>
          <execution>
            <id>generate-flattened-resources</id>
            <goals>
              <goal>flatten</goal>
            </goals>
            <phase>process-resources</phase>
          </execution>
        </executions>
      </plugin>
      <!-- post-clean
      "execute processes needed to finalize the project cleaning" -->
      <!-- validate
      "validate the project is correct and all necessary information is available." -->
      <!-- initialize
      "initialize build state, e.g. set properties or create directories." -->
      <!-- generate-sources
      "generate any source code for inclusion in compilation." -->
      <!-- process-sources
      "process the source code, for example to filter any values." -->
      <plugin>
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
        <version>2.44.5</version>
        <configuration>
          <pom>
            <sortPom>
              <expandEmptyElements>false</expandEmptyElements>
              <keepBlankLines>false</keepBlankLines>
              <endWithNewline>true</endWithNewline>
            </sortPom>
          </pom>
          <java>
            <removeUnusedImports/>
            <googleJavaFormat>
              <version>1.26.0</version>
              <style>GOOGLE</style>
              <reflowLongStrings>true</reflowLongStrings>
              <formatJavadoc>true</formatJavadoc>
            </googleJavaFormat>
          </java>
        </configuration>
        <executions>
          <execution>
            <id>check-code-formatting</id>
            <goals>
              <goal>check</goal>
            </goals>
            <phase>process-sources</phase>
          </execution>
        </executions>
      </plugin>
      <!-- generate-resources
      "generate resources for inclusion in the package." -->
      <!-- process-resources
      "copy and process the resources into the destination directory, ready for packaging." -->
      <!-- compile
      "compile the source code of the project." -->
      <!-- process-classes
      "post-process the generated files from compilation, for example to do bytecode enhancement on Java classes." -->
      <!-- generate-test-sources
      "generate any test source code for inclusion in compilation." -->
      <!-- process-test-sources
      "process the test source code, for example to filter any values." -->
      <!-- generate-test-resources
      "create resources for testing." -->
      <!-- process-test-resources
      "copy and process the resources into the test destination directory." -->
      <!-- test-compile
      "compile the test source code into the test destination directory" -->
      <!-- process-test-classes
      "post-process the generated files from test compilation, for example to do bytecode enhancement on Java classes." -->
      <!-- test
      "run tests using a suitable unit testing framework. These tests should not require the code be packaged or deployed." -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.5.3</version>
        <configuration>
          <argLine>@{argLine}
            -javaagent:${settings.localRepository}/org/mockito/mockito-core/${mockito-core.version}/mockito-core-${mockito-core.version}.jar
            -Xshare:off</argLine>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.13</version>
        <executions>
          <execution>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>report</id>
            <goals>
              <goal>report</goal>
            </goals>
            <phase>test</phase>
          </execution>
          <execution>
            <id>jacoco-check</id>
            <goals>
              <goal>check</goal>
            </goals>
            <phase>test</phase>
            <configuration>
              <rules>
                <rule>
                  <element>PACKAGE</element>
                  <limits>
                    <!-- Minimum line coverage percentage for unit tests -->
                    <limit>
                      <counter>LINE</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>0.90</minimum>
                    </limit>
                  </limits>
                </rule>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- prepare-package
      "perform any operations necessary to prepare a package before the actual packaging. This often results in an unpacked, processed version of the package." -->
      <!-- package
      "take the compiled code and package it in its distributable format, such as a JAR." -->
      <!-- pre-integration-test
      "perform actions required before integration tests are executed. This may involve things such as setting up the required environment." -->
      <!-- integration-test
      "process and deploy the package if necessary into an environment where integration tests can be run." -->
      <!-- post-integration-test
      "perform actions required after integration tests have been executed. This may including cleaning up the environment." -->
      <!-- verify
      "run any checks to verify the package is valid and meets quality criteria." -->
      <!-- install
      "install the package into the local repository, for use as a dependency in other projects locally." -->
      <!-- deploy
      "done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects." -->
    </plugins>
  </build>
</project>
